name: "Groundhog day: Cache Docker"

on:
  workflow_dispatch:
  pull_request:

permissions:
  packages: write

env:
  CARGO_TERM_COLOR: always
  # renovate: datasource=crate depName=cargo-deny versioning=semver
  CARGO_DENY_VERSION: 0.14.20
  # renovate: datasource=crate depName=grcov versioning=semver
  GRCOV_VERSION: 0.8.19
  # renovate: datasource=npm depName=pnpm
  PNPM_VERSION: 8.15.6

jobs:
  backend:
    runs-on: ubuntu-22.04
    env:
      JOBS: 1 # See https://git.io/vdao3 for details.
      RUSTDOCFLAGS: "-D warnings"
      RUST_BACKTRACE: 1
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/postgres
      RUSTFLAGS: "-D warnings -Cinstrument-coverage"
      MALLOC_CONF: "background_thread:true,abort_conf:true,abort:true,junk:true"

    services:
      postgres:
        image: postgres:13@sha256:eee22204934b36935237e7c92355e3178cfdf3c5377dec9c19c848115cc4637b
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: dtolnay/rust-toolchain@nightly
      - name: Setup
        run: |
          rustup component add rustfmt
          rustup component add clippy
          rustup component add llvm-tools
          curl -sL https://github.com/mozilla/grcov/releases/download/v${{ env.GRCOV_VERSION }}/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar xjf -

      - name: Fetch
        run: cargo fetch

      - name: Lint
        run: |
          cargo fmt --check --all
          cargo clippy --all-targets --all-features --workspace

      - name: Build
        run: |
          cargo doc --no-deps --document-private-items
          cargo build --tests --workspace

      - name: Tests
        run: |
          cargo test --workspace
          ./grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" --ignore "target/debug/build/**" -o target/coverage.lcov

      - name: Build Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin ghcr.io
          docker pull ghcr.io/raniz85/pipeline-stuff:latest
          docker buildx build \
            -t pipeline-stuff:latest \
            -f backend.Dockerfile \
            --cache-from ghcr.io/raniz85/pipeline-stuff:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .

      - name: Push Docker image
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker tag pipeline-stuff:latest ghcr.io/raniz85/pipeline-stuff:latest
          docker push ghcr.io/raniz85/pipeline-stuff:latest
